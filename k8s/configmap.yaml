apiVersion: v1
kind: ConfigMap
metadata:
  name: swagger-mcp-go-config
  namespace: swagger-mcp-go
data:
  config.yaml: |
    server:
      host: "0.0.0.0"
      port: 8080
      readTimeout: 30s
      writeTimeout: 30s

    mcp:
      enabled: true
      host: "0.0.0.0"
      port: 8081

    logging:
      level: "info"
      format: "json"

    metrics:
      enabled: true
      path: "/metrics"

    tracing:
      enabled: true
      endpoint: "http://jaeger-collector:14268/api/traces"
      serviceName: "swagger-mcp-go"

    upstream:
      timeout: 30s
      retryCount: 3
      retryDelay: 1s
      circuitBreaker:
        threshold: 5
        timeout: 60s

    specs:
      defaultTTL: "1h"
      maxSize: "10MB"
      
    policies:
      rateLimit:
        enabled: true
        requestsPerMinute: 100
      cors:
        enabled: true
        allowOrigins: ["*"]
        allowMethods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: swagger-mcp-go-examples
  namespace: swagger-mcp-go
data:
  petstore.json: |
    {
      "openapi": "3.0.0",
      "info": {
        "title": "Pet Store API",
        "description": "A simple pet store API for testing OpenAPI to MCP conversion",
        "version": "1.0.0"
      },
      "servers": [
        {
          "url": "https://petstore.swagger.io/v2"
        }
      ],
      "paths": {
        "/pet": {
          "post": {
            "operationId": "addPet",
            "summary": "Add a new pet to the store",
            "description": "Creates a new pet in the pet store",
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the pet"
                      },
                      "status": {
                        "type": "string",
                        "enum": ["available", "pending", "sold"],
                        "description": "Pet status in the store"
                      }
                    },
                    "required": ["name", "status"]
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Pet created successfully"
              },
              "400": {
                "description": "Invalid input"
              }
            }
          }
        },
        "/pet/findByStatus": {
          "get": {
            "operationId": "findPetsByStatus",
            "summary": "Find pets by status",
            "description": "Returns pets based on status",
            "parameters": [
              {
                "name": "status",
                "in": "query",
                "required": true,
                "schema": {
                  "type": "string",
                  "enum": ["available", "pending", "sold"]
                },
                "description": "Status values that need to be considered for filter"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful operation"
              },
              "400": {
                "description": "Invalid status value"
              }
            }
          }
        },
        "/pet/{petId}": {
          "get": {
            "operationId": "getPetById",
            "summary": "Find pet by ID",
            "description": "Returns a single pet",
            "parameters": [
              {
                "name": "petId",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                },
                "description": "ID of pet to return"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful operation"
              },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Pet not found"
              }
            }
          },
          "delete": {
            "operationId": "deletePet",
            "summary": "Delete a pet",
            "description": "Deletes a pet from the store",
            "parameters": [
              {
                "name": "petId",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                },
                "description": "Pet ID to delete"
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Pet not found"
              }
            }
          }
        }
      }
    }